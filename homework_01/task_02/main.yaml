---

- name: CONFIGURE NGINX WEB SERVER WITH TLS SUPPORT
  hosts: centos_nodes
  gather_facts: true
  #become: true
  vars:
    http_nginx_port: 80 # NGINX HTTP port by default
    https_nginx_port: 443 # NGINX HTTPS port by default
    https_nginx_cert_path: /etc/ssl/crt/{{ ansible_host }}.crt
    https_nginx_prkey_path: /etc/ssl/private/{{ ansible_host }}.pem
    https_nginx_csr_path: /etc/ssl/csr/{{ ansible_host }}.csr

  tasks:
    
    ### Create a directories for SSL certificate components. ####################
    ### Permissions: CSR/CRT (0644), KEY (0600). ################################
    - name: Creates the directory /etc/ssl/crt
      file:
        path: /etc/ssl/crt
        state: directory

    - name: Creates the directory /etc/ssl/private
      file:
        path: /etc/ssl/private
        state: directory

    - name: Creates the directory /etc/ssl/csr
      file:
        path: /etc/ssl/csr
        state: directory
    #############################################################################
    
    ### SSL Certificate generation process. BEGIN...#############################
    - name: Generate a Private Key for the OpenSSL certificate
      openssl_privatekey:
        path: "{{ https_nginx_prkey_path }}"
        size: 2048

    - name: Generate a Certificate Signing Request (CSR)
      openssl_csr:
        path: "{{ https_nginx_csr_path }}"
        privatekey_path: "{{ https_nginx_prkey_path }}"
    
    - name: Generate a Self Signed OpenSSL certificate itself
      openssl_certificate:
        path: "{{ https_nginx_cert_path }}"
        privatekey_path: "{{ https_nginx_prkey_path }}"
        csr_path: "{{ https_nginx_csr_path }}"
        provider: selfsigned
    ### SSL Certificate generation process. ...END.##############################

    ### NGINX Installation steps. BEGIN...#######################################
    - name: Create NGINX repository definition
      copy:
        src: files/nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0644

    - name: Install NGINX Web Services
      ansible.builtin.command: /usr/bin/yum install nginx -y

    - name: Copy main NGINX Configuration File
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: restart_nginx_service

    - name: Copy Web Site's Configuration Content
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/with_ls.conf
        owner: root
        group: root
        mode: 0644
      notify: restart_nginx_service

    - name: Copy index.html Markup Content
      template:
        src: templates/index.html.j2
        dest: /usr/share/nginx/html/index.html
        owner: root
        group: root
        mode: 0644
      notify: restart_nginx_service

    - name: Verify that NGINX Service is Enabled and Started
      service:
        name: nginx
        state: started
        enabled: true

    - name: Set a Firewalld rules for NGINX Web Service 
      ansible.builtin.command: firewall-cmd --permanent --add-port={{ item }}/tcp
      ignore_errors: false
      notify: reload_firewalld_service # Apply these firewalld rules!
      loop:
        - "{{ http_nginx_port }}"
        - "{{ https_nginx_port }}"
    
    ### NGINX Installation steps. ...END.########################################

  post_tasks: # Web Nodes availability testing ##################################
   
    - name: Check that HTTP Web Node returns a status 200
      uri:
        url: "http://{{ ansible_host }}:{{ http_nginx_port }}"
        return_content: yes
      register: result
      failed_when: result.status != 200

    - name: Makes a secure connection and get HTTPS port status 
      wait_for:
        host: "{{ ansible_host }}"
        port: "{{ https_nginx_port }}"
        state: started         # Port should be open
        delay: 0               # No wait before first check (sec)
        timeout: 3             # Stop checking after timeout (sec)
      ignore_errors: yes
  ###############################################################################

  handlers:

    - name: restart_nginx_service
      service:
        name: nginx
        state: restarted

    - name: reload_firewalld_service
      service:
        name: firewalld
        state: reloaded
